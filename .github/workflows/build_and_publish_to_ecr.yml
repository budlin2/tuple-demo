name: Build and Publish Docker Image to ECR

on:
  push:
    branches:
      - master  # Should probably be staging
      # Or configure for staging and master and change the env variables

env:
  AWS_REGION: us-east-2
  ECR_REPO_NAME: 907020937520.dkr.ecr.us-east-2.amazonaws.com/tuple-demo

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '18'  # Adjust to your Node.js version

      - name: Extract version from commit message
        id: extract_version
        run: |
          COMMIT_MESSAGE=$(git log -1 --pretty=%B)
          echo "Commit Message: $COMMIT_MESSAGE"
          VERSION=$(echo "$COMMIT_MESSAGE" | head -n 1 | grep -Eo '^[0-9]+\.[0-9]+\.[0-9]+')
          if [ -z "$VERSION" ]; then
            echo "Error: No version number found in the commit message."
            exit 1
          fi
          echo "::set-output name=version::$VERSION"

      - name: Verify version matches package.json
        id: verify_version
        run: |
          PACKAGE_VERSION=$(jq -r '.version' package.json)
          if [ "$PACKAGE_VERSION" != "${{ steps.extract_version.outputs.version }}" ]; then
            echo "Error: Version number in commit message does not match package.json"
            exit 1
          fi

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build Docker image
        id: build_image
        run: |
          # Define the image name
          IMAGE_NAME=${{ env.ECR_REPO_NAME }}:${{ steps.extract_version.outputs.version }}
          
          # Build the Docker image
          docker build -t $IMAGE_NAME .
          
          # Tag the image with the ECR repository URI
          docker tag $IMAGE_NAME $IMAGE_NAME

      - name: Push Docker image
        run: |
          # Push the image to ECR
          docker push ${{ env.ECR_REPO_NAME }}:${{ steps.extract_version.outputs.version }}
